{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["document.addEventListener('DOMContentLoaded', () => {\n    const body = document.querySelector('body');\n    const gameFields = document.querySelectorAll<HTMLButtonElement>('.game-field');\n    const resetButton = document.querySelector<HTMLButtonElement>('#reset-button');\n    const resultMessage = document.querySelector<HTMLParagraphElement>('.result-text');\n    const playerDisplay = document.querySelector<HTMLSpanElement>('#game-player');\n\n    // add interface to be able to load the current gamestate without any typescript issues\n    interface GameState {\n        fields: { id: string; player: string | null; disabled: boolean}[];\n        currentPlayer: string;\n        resultMessage: string | null;\n    }\n\n    const win = [\n        // rows\n        ['one', 'two', 'three'],\n        ['four', 'five', 'six'],\n        ['seven', 'eight', 'nine'],\n\n        //columns\n        ['one', 'four', 'seven'],\n        ['two', 'five', 'eight'],\n        ['three', 'six', 'nine'],\n\n        //diagonal\n        ['one', 'five', 'nine'],\n        ['three', 'five', 'seven'],\n    ]\n\n\n    const players: string[] = ['player-o', 'player-x'];\n\n    if (!loadGameState()) {\n        const randomPlayer = players[ Math.floor ( Math.random() * players.length )];\n        body?.classList.add(randomPlayer);\n        updateCurrentPlayer();\n    }\n\n    //add random class to the body, either the first or second player\n\n\n    gameFields.forEach((gameField) => {\n        gameField.addEventListener('click', () => {\n\n            if (gameField.getAttribute('data-player')) {\n                return;\n                // if field is occopied stop function\n            }\n\n            //current player\n            const currentPlayer = body?.classList.contains('player-o') ? 'o' : 'x';\n            gameField.setAttribute('data-player', currentPlayer);\n            gameField.disabled = true;\n            //disable button, once field is marked\n\n            if (currentPlayer === 'o') {\n                body?.classList.remove('player-o');\n                body?.classList.add('player-x');\n                // if player one is playing add attribute o to the button and change to player x\n            } else {\n                body?.classList.remove('player-x');\n                body?.classList.add('player-o');\n                //same thing just the other way around\n            }\n\n            saveGameState();\n            updateCurrentPlayer();\n\n            //check for a win after every move\n            if (checkWin(currentPlayer)) {\n                resultMessage!.style.display = 'block';\n                resultMessage!.textContent =`Player ${currentPlayer.toUpperCase()} won!`;\n                setTimeout(resetGame, 2000);\n                //after testing I found out that it was showing a draw even if somebody won\n                return;\n            }\n\n            if (checkDraw()) {\n                resultMessage!.style.display = 'block';\n                resultMessage!.textContent = 'Draw!';\n                setTimeout(resetGame, 2000);\n            }\n            \n        })\n    });\n\n    // check for the win of each player\n    function checkWin(player:string): boolean {\n        for (let combination of win) {\n            let matches = 0;\n\n            for (let id of combination) {\n                const field = document.getElementById(id);\n                if (field?.getAttribute('data-player') === player) {\n                    matches++;\n                }\n            }\n\n            if (matches === 3) {\n                return true;\n            }\n        }\n        //return false in all other cases\n        return false;\n    }\n\n\n    function checkDraw(): boolean {\n        for (let gameField of gameFields) {\n            if (!gameField.getAttribute('data-player')) {\n                // if any field is empty, not a draw\n                return false; \n            }\n        }\n        // in this case all fields are filled, so its a draw\n        return true; \n    }\n    \n\n\n    function updateCurrentPlayer() {\n        if(body?.classList.contains('player-o')) {\n            playerDisplay!.textContent = 'O';\n        } else {\n            playerDisplay!.textContent = 'X';\n        }\n    }\n\n\n    //this is the local storage current save of the gamestate\n    function saveGameState() {\n        const state: any = {\n            fields: Array.from(gameFields).map((field) => ({\n                //get an array of objects that save the current field id, the player with its current attribute and if the field is disabled or not\n                id: field.id,\n                player: field.getAttribute('data-player'),\n                disabled: field.disabled\n            })),\n            //check also the current body class\n            currentPlayer: body?.classList.contains('player-o') ? 'player-o' : 'player-x',\n            // also save the resultmessage, to have all the components of the current game state saved\n            resultMessage:resultMessage!.style.display === 'block' ? resultMessage!.textContent : null\n        };\n        localStorage.setItem('tic-tac-toe', JSON.stringify(state));\n    }\n\n\n    //load game on the state where it got left off\n    function loadGameState(): boolean {\n        const savedState = localStorage.getItem('tic-tac-toe');\n        // if no saved game state return false\n        if (!savedState) {return false}; \n\n        // parse the current game state\n        const state = JSON.parse(savedState) as GameState;\n\n        // for each field fill out the data player attributes that were filled out before again and set the gameField to disabled\n        state.fields.forEach((field: { id: string; player: string | null; disabled: boolean}) => {\n            const gameField = document.getElementById(field.id) as HTMLButtonElement;\n            if (field.player) {\n                gameField.setAttribute('data-player', field.player);\n                gameField.disabled = field.disabled;\n            }\n        });\n\n        //remove both body classes and add the current playerstate\n        body?.classList.remove('player-o', 'player-x');\n        body?.classList.add(state.currentPlayer);\n        //also update the player on the page\n        updateCurrentPlayer();\n\n\n        //if there is a resultmessage to show, also display it\n        if (state.resultMessage) {\n            resultMessage!.style.display = 'block';\n            resultMessage!.textContent = state.resultMessage;\n        }\n        // return true if there is a saved state\n        return true;\n    }\n\n    //reset the game again\n    function resetGame() {\n        gameFields.forEach((gameField) => {\n            gameField.removeAttribute('data-player');\n            gameField.disabled = false;\n        });\n        //remove the body class\n        body?.classList.remove('player-o', 'player-x');\n        //make random player start again\n        body?.classList.add(players[Math.floor(Math.random() * players.length)]);\n        resultMessage!.style.display = 'none';\n        //reset the current gamestorage in the localstorage as well\n        localStorage.removeItem('tic-tac-toe');\n    }\n\n    resetButton?.addEventListener('click', () => {\n        resetGame();\n    })\n});"],
  "mappings": "AAAA,SAAS,iBAAiB,oBAAoB,MAAM;AAChD,QAAM,OAAO,SAAS,cAAc,MAAM;AAC1C,QAAM,aAAa,SAAS,iBAAoC,aAAa;AAC7E,QAAM,cAAc,SAAS,cAAiC,eAAe;AAC7E,QAAM,gBAAgB,SAAS,cAAoC,cAAc;AACjF,QAAM,gBAAgB,SAAS,cAA+B,cAAc;AAS5E,QAAM,MAAM;AAAA;AAAA,IAER,CAAC,OAAO,OAAO,OAAO;AAAA,IACtB,CAAC,QAAQ,QAAQ,KAAK;AAAA,IACtB,CAAC,SAAS,SAAS,MAAM;AAAA;AAAA,IAGzB,CAAC,OAAO,QAAQ,OAAO;AAAA,IACvB,CAAC,OAAO,QAAQ,OAAO;AAAA,IACvB,CAAC,SAAS,OAAO,MAAM;AAAA;AAAA,IAGvB,CAAC,OAAO,QAAQ,MAAM;AAAA,IACtB,CAAC,SAAS,QAAQ,OAAO;AAAA,EAC7B;AAGA,QAAM,UAAoB,CAAC,YAAY,UAAU;AAEjD,MAAI,CAAC,cAAc,GAAG;AAClB,UAAM,eAAe,QAAS,KAAK,MAAQ,KAAK,OAAO,IAAI,QAAQ,MAAO,CAAC;AAC3E,UAAM,UAAU,IAAI,YAAY;AAChC,wBAAoB;AAAA,EACxB;AAKA,aAAW,QAAQ,CAAC,cAAc;AAC9B,cAAU,iBAAiB,SAAS,MAAM;AAEtC,UAAI,UAAU,aAAa,aAAa,GAAG;AACvC;AAAA,MAEJ;AAGA,YAAM,gBAAgB,MAAM,UAAU,SAAS,UAAU,IAAI,MAAM;AACnE,gBAAU,aAAa,eAAe,aAAa;AACnD,gBAAU,WAAW;AAGrB,UAAI,kBAAkB,KAAK;AACvB,cAAM,UAAU,OAAO,UAAU;AACjC,cAAM,UAAU,IAAI,UAAU;AAAA,MAElC,OAAO;AACH,cAAM,UAAU,OAAO,UAAU;AACjC,cAAM,UAAU,IAAI,UAAU;AAAA,MAElC;AAEA,oBAAc;AACd,0BAAoB;AAGpB,UAAI,SAAS,aAAa,GAAG;AACzB,sBAAe,MAAM,UAAU;AAC/B,sBAAe,cAAa,UAAU,cAAc,YAAY,CAAC;AACjE,mBAAW,WAAW,GAAI;AAE1B;AAAA,MACJ;AAEA,UAAI,UAAU,GAAG;AACb,sBAAe,MAAM,UAAU;AAC/B,sBAAe,cAAc;AAC7B,mBAAW,WAAW,GAAI;AAAA,MAC9B;AAAA,IAEJ,CAAC;AAAA,EACL,CAAC;AAGD,WAAS,SAAS,QAAwB;AACtC,aAAS,eAAe,KAAK;AACzB,UAAI,UAAU;AAEd,eAAS,MAAM,aAAa;AACxB,cAAM,QAAQ,SAAS,eAAe,EAAE;AACxC,YAAI,OAAO,aAAa,aAAa,MAAM,QAAQ;AAC/C;AAAA,QACJ;AAAA,MACJ;AAEA,UAAI,YAAY,GAAG;AACf,eAAO;AAAA,MACX;AAAA,IACJ;AAEA,WAAO;AAAA,EACX;AAGA,WAAS,YAAqB;AAC1B,aAAS,aAAa,YAAY;AAC9B,UAAI,CAAC,UAAU,aAAa,aAAa,GAAG;AAExC,eAAO;AAAA,MACX;AAAA,IACJ;AAEA,WAAO;AAAA,EACX;AAIA,WAAS,sBAAsB;AAC3B,QAAG,MAAM,UAAU,SAAS,UAAU,GAAG;AACrC,oBAAe,cAAc;AAAA,IACjC,OAAO;AACH,oBAAe,cAAc;AAAA,IACjC;AAAA,EACJ;AAIA,WAAS,gBAAgB;AACrB,UAAM,QAAa;AAAA,MACf,QAAQ,MAAM,KAAK,UAAU,EAAE,IAAI,CAAC,WAAW;AAAA;AAAA,QAE3C,IAAI,MAAM;AAAA,QACV,QAAQ,MAAM,aAAa,aAAa;AAAA,QACxC,UAAU,MAAM;AAAA,MACpB,EAAE;AAAA;AAAA,MAEF,eAAe,MAAM,UAAU,SAAS,UAAU,IAAI,aAAa;AAAA;AAAA,MAEnE,eAAc,cAAe,MAAM,YAAY,UAAU,cAAe,cAAc;AAAA,IAC1F;AACA,iBAAa,QAAQ,eAAe,KAAK,UAAU,KAAK,CAAC;AAAA,EAC7D;AAIA,WAAS,gBAAyB;AAC9B,UAAM,aAAa,aAAa,QAAQ,aAAa;AAErD,QAAI,CAAC,YAAY;AAAC,aAAO;AAAA,IAAK;AAAC;AAG/B,UAAM,QAAQ,KAAK,MAAM,UAAU;AAGnC,UAAM,OAAO,QAAQ,CAAC,UAAmE;AACrF,YAAM,YAAY,SAAS,eAAe,MAAM,EAAE;AAClD,UAAI,MAAM,QAAQ;AACd,kBAAU,aAAa,eAAe,MAAM,MAAM;AAClD,kBAAU,WAAW,MAAM;AAAA,MAC/B;AAAA,IACJ,CAAC;AAGD,UAAM,UAAU,OAAO,YAAY,UAAU;AAC7C,UAAM,UAAU,IAAI,MAAM,aAAa;AAEvC,wBAAoB;AAIpB,QAAI,MAAM,eAAe;AACrB,oBAAe,MAAM,UAAU;AAC/B,oBAAe,cAAc,MAAM;AAAA,IACvC;AAEA,WAAO;AAAA,EACX;AAGA,WAAS,YAAY;AACjB,eAAW,QAAQ,CAAC,cAAc;AAC9B,gBAAU,gBAAgB,aAAa;AACvC,gBAAU,WAAW;AAAA,IACzB,CAAC;AAED,UAAM,UAAU,OAAO,YAAY,UAAU;AAE7C,UAAM,UAAU,IAAI,QAAQ,KAAK,MAAM,KAAK,OAAO,IAAI,QAAQ,MAAM,CAAC,CAAC;AACvE,kBAAe,MAAM,UAAU;AAE/B,iBAAa,WAAW,aAAa;AAAA,EACzC;AAEA,eAAa,iBAAiB,SAAS,MAAM;AACzC,cAAU;AAAA,EACd,CAAC;AACL,CAAC;",
  "names": []
}
